(*==========timed data stream========*)
Require Import Reals.
Require Import Streams.

Open Scope type_scope.
Definition Time := R.
Definition Data := nat.
Definition TD := Time*Data.
Definition PrL {A B: Type}(pair: A  * B) :=
  match pair with
  | (a, b) => a
  end.
Definition PrR {A B: Type}(pair: A * B ) :=
  match pair with
  | (a, b) => b
  end.

           (*increasing time moments*)
Open Scope R_scope.
Axiom Inc_T : forall (T: Stream TD)(n:nat),
  PrL(Str_nth n T) < PrL(Str_nth n (tl T)).


(*=============judgement===========*)

           (*the judgement about time*)
                         (*Basic:*)
Definition Teq(s1 s2:Stream TD) : Prop :=
  forall n:nat, PrL(Str_nth n s1) = PrL(Str_nth n s2).
Definition Tlt(s1 s2:Stream TD) : Prop :=
  forall n:nat, PrL(Str_nth n s1) < PrL(Str_nth n s2).
Definition Tgt(s1 s2:Stream TD) : Prop :=
  forall n:nat, PrL(Str_nth n s1) > PrL(Str_nth n s2).
                         (*Timed:*)
Definition Teqt(s1 s2:Stream TD)(t:Time) : Prop :=
  forall n:nat, PrL(Str_nth n s1) + t = PrL(Str_nth n s2).
Definition Tltt(s1 s2:Stream TD)(t:Time) : Prop :=
  forall n:nat, PrL(Str_nth n s1) + t < PrL(Str_nth n s2).
Definition Tgtt(s1 s2:Stream TD)(t:Time) : Prop :=
  forall n:nat, PrL(Str_nth n s1) + t > PrL(Str_nth n s2).

          (*the judgement about data*)
Definition Deq(s1 s2:Stream TD) : Prop :=
  forall n:nat, PrR(Str_nth n s1) = PrR(Str_nth n s2).


(*==============channel=============*)

                         (*Basic channel*)
Definition Sync(Input Output:Stream TD) : Prop :=
  Input = Output. (*i.e.Teq Input Output /\ Deq Input Output *)
Definition SyncDrain(Input1 Input2:Stream TD) : Prop :=
  (Teq Input1 Input2).
Definition FIFO1(Input Output:Stream TD) : Prop :=
  (Tlt Input Output)
  /\
  (Tlt Output (tl Input))
  /\
  (Deq Input Output).
Definition FIFO1e(Input Output :Stream TD)(e:Data) : Prop :=
  (Tgt Input Output)
  /\
  PrR(hd Output)=e
  /\
  (Deq Input (tl Output)).
Parameter AsyncDrain : Stream TD -> Stream TD -> Prop.
Axiom AsyncDrain_coind:
  forall Input1 Input2:Stream TD,
  AsyncDrain Input1 Input2 ->
  (
      (~PrL(hd Input1)  =  PrL (hd Input2))
  )
  /\
  (
      (   (PrL(hd Input1)  <  PrL (hd Input2))
          /\
          AsyncDrain (tl Input1) Input2               )
      /\
      (   (PrL(hd Input1)  >  PrL (hd Input2))
          /\
          AsyncDrain Input1 (tl Input2)               )
  ).
Parameter LossySync : Stream TD -> Stream TD -> Prop.
Axiom LossySync_coind:
  forall Input Output:Stream TD,
  LossySync Input Output ->
  (
    (hd Output = hd Input  /\  LossySync (tl Input) (tl Output))
    \/
    LossySync (tl Input) Output
  ).

                         (*Timed channel*)
Parameter timeout : Data.
Definition Timert (Input Output:Stream TD)(t:Time) : Prop :=
  (forall n:nat, PrL(Str_nth n Input) + t  < PrL(Str_nth n (tl Input)))
  /\
  (Teqt Input Output t)
  /\
  (forall n:nat, PrR (Str_nth n Output) = timeout).

Parameter off : Data.
Parameter OFFTimert : Stream TD -> Stream TD -> Time -> Prop.
Axiom OFFTimert_coind:
  forall (Input Output:Stream TD)(t:Time), OFFTimert Input Output t ->

  (     forall n:nat, PrR(Str_nth n Input) = off  \/ PrL(Str_nth n Input) + t  < PrL(Str_nth n (tl Input))
  )/\
  (    (PrR (hd (tl Input)) = off)   -> (OFFTimert (tl (tl Input)) Output t)
  )/\
  (    (~PrR (hd (tl Input)) = off) -> (PrL (hd Output) = PrL (hd Input) + t)  /\
                                                   (PrR (hd Output) = timeout)                /\
                                                   OFFTimert (tl Input) (tl Output) t
  ).

Parameter reset : Data.
Parameter RSTTimert : Stream TD -> Stream TD -> Time -> Prop.
Axiom RSTTimert_coind:
  forall (Input Output:Stream TD)(t:Time), RSTTimert Input Output t ->

  (     forall n:nat, PrR(Str_nth n Input) = reset  \/ PrL(Str_nth n Input) + t  < PrL(Str_nth n (tl Input))
  )/\
  (    (PrR (hd (tl Input)) = reset)   -> (RSTTimert  (tl Input) Output t)  
  )/\
  (    (~PrR (hd (tl Input)) = reset) -> (PrL (hd Output) = PrL (hd Input) + t) /\
                                                      (PrR (hd Output) = timeout)               /\
                                                      RSTTimert (tl Input) (tl Output) t
  ).

Parameter expire : Data.
Parameter EXPTimert : Stream TD -> Stream TD -> Time -> Prop.
Axiom EXPTimert_coind:
  forall (Input Output:Stream TD)(t:Time), EXPTimert Input Output t ->

  (     forall n:nat, PrR(Str_nth n Input) = expire  \/ PrL(Str_nth n Input) + t  < PrL(Str_nth n (tl Input))
  )/\
  (    (PrR(hd (tl Input)) = expire)   -> (PrL(hd Output) = PrL(hd (tl Input))) /\
                                                       (PrR(hd Output) = timeout)             /\
                                                       (EXPTimert (tl Input) (tl Output) t)
  )/\
  (    (~PrR(hd (tl Input)) = expire) -> (PrL (hd Output) = PrL (hd Input) + t) /\
                                                       (PrR (hd Output) = timeout)               /\
                                                       (EXPTimert (tl Input) (tl Output) t)
  ).



(*=============Operators============*)
Parameter merge : Stream TD -> Stream TD ->Stream TD -> Prop.
Axiom merge_coind:
  forall s1 s2 s3:Stream TD, merge s1 s2 s3 ->
  (   ~(PrL(hd s1) = PrL(hd s2))
  /\
  (
     (   (PrL(hd s1) < PrL(hd s2))  -> ( (hd s3=hd s1)  /\ merge (tl s1) s2 (tl s3))   )
     /\
     (   (PrL(hd s1) > PrL(hd s2))  -> ( (hd s3=hd s2)  /\ merge s1 (tl s2) (tl s3))   )
  ) ).



(*============lemma list============*)
Lemma Eq_Tltt : forall (A B:Stream TD)(t:Time) (n:nat),
  Tltt A B t ->  PrL(Str_nth n A) + t < PrL(Str_nth n B).
Proof.
intros.
apply (H n).
Qed.
Lemma Eq_Teqt : forall (A B:Stream TD)(t:Time) (n:nat),
  Teqt A B t ->  PrL(Str_nth n A) + t = PrL(Str_nth n B).
Proof.
intros.
apply (H n).
Qed.
Lemma transfer_eqt_lt : forall (s1 s2 s3:Stream TD)(t:Time),
  (Teqt s1 s2 t) /\ (Tlt s2 s3) -> (Tltt s1 s3 t).
Proof.
intros s1 s2 s3 t.
intros.
destruct H.
assert(forall n:nat, PrL(Str_nth n s1) +t = PrL(Str_nth n s2)).
auto.
assert (forall n:nat, PrL(Str_nth n s2) < PrL(Str_nth n s3)).
auto.
assert(forall n:nat, PrL(Str_nth n s1) +t < PrL(Str_nth n s3)).
intros n.
rewrite H1.
auto.
auto.
Qed.
Lemma transfer_gt_tl : forall s1 s2:Stream TD, Tgt s1 s2 -> Tgt (tl s1) (tl s2).
Proof.
intros.
assert (forall n:nat, PrL(Str_nth n s1)  > PrL(Str_nth n s2)).
auto.
assert (forall n:nat, PrL(Str_nth (n+1) s1)  > PrL(Str_nth (n+1) s2)).
auto.
assert (forall n:nat, PrL(Str_nth n (tl s1))  > PrL(Str_nth n (tl s2))).
intros.

assert(Str_nth n (Str_nth_tl 1 s1) = Str_nth (n+1) s1).
apply Str_nth_plus.
assert (Str_nth_tl 1 s1 = tl s1).
auto.
rewrite H3 in H2.
assert(Str_nth n (Str_nth_tl 1 s2) = Str_nth (n+1) s2).
apply Str_nth_plus.
assert (Str_nth_tl 1 s2 = tl s2).
auto.
rewrite H5 in H4.
rewrite H2.
rewrite H4.
auto.
auto.
Qed.
Lemma transfer_gt_gt : forall s1 s2 s3:Stream TD,
   (Tgt (tl s2) s1) /\ (Tgt (tl s3) s2)   ->  (Tgt (tl(tl s3)) s1).
Proof.
intros s1 s2 s3 H.
destruct H.
assert(forall n:nat, PrL(Str_nth n (tl s2)) > PrL(Str_nth n s1)).
auto.
assert(Tgt (tl (tl s3)) (tl s2)).
apply transfer_gt_tl.
assumption.
assert(forall n:nat,PrL(Str_nth n (tl (tl s3))) > PrL(Str_nth n (tl s2))).
auto.
assert(forall n:nat, PrL(Str_nth n (tl (tl s3))) > PrL(Str_nth n s1)).
intros.

assert (PrL (Str_nth n (tl s2)) > PrL (Str_nth n s1)).
auto.
assert(PrL (Str_nth n (tl (tl s3))) > PrL (Str_nth n (tl s2))).
auto.
assert (PrL (Str_nth n (tl (tl s3))) > PrL (Str_nth n (tl s2)) -> PrL (Str_nth n (tl s2)) > PrL (Str_nth n s1) -> PrL (Str_nth n (tl (tl s3))) > PrL (Str_nth n s1)).
apply Rgt_trans.
apply H6.
assumption.
assumption.
auto.
Qed.
Lemma transfer_eqt : forall (s1 s2 s3:Stream TD)(t:Time),
   (Teq s1 s2) /\ (Teqt s2 s3 t) -> (Teqt s1 s3 t).
Proof.
intros s1 s2 s3 t H.
destruct H.
assert (forall n:nat, PrL(Str_nth n s1)  = PrL(Str_nth n s2)).
auto.
assert (forall n:nat, PrL(Str_nth n s2) + t  = PrL(Str_nth n s3)).
auto.
assert (forall n:nat, PrL(Str_nth n s1) + t  = PrL(Str_nth n s3)).
intros.
rewrite H1.
auto.
auto.
Qed.
Lemma transfer_merge:forall (s11 s12 s13 s21 s22 s23:Stream TD)(t:Time),
  (merge s11 s12 s13) /\ (Teqt s11 s21 t) /\
  (Teqt s12 s22 t) /\ (merge s21 s22 s23) ->
  (Teqt s13 s23 t).
Proof.
intros s11 s12 s13 s21 s22 s23 t H.
admit.
Qed.



(*===============================*)
                    (*example 1*)
(*===============================*)
Section example1.
Theorem LB_FIFO1 : forall (A B C D E :Stream TD)(t:Time),
   (Timert A C t) /\ (FIFO1 A D) /\ (SyncDrain D E) /\ (FIFO1 C E) /\ (Sync D B)
   -> (Deq A B) /\ (Tltt A B t).
Proof.
intros.
destruct H;destruct H0;destruct H1;destruct H2.
split.

(*Proof for subgoal 1: Deq A B*)
rewrite <- H3.
destruct H0.
destruct H4.
assumption.

(*Proof for subgoal 2: Tltt A B t*)
rewrite <- H3.
intro n.
rewrite H1.
apply Eq_Tltt.
      (*Prepare for Lemma transfer_eqt_lt *)
      assert (Teqt A C t /\ Tlt C E).
      split.
      (*Proof for Teqt A C t*)
      destruct H.
      destruct H4.
      assumption.
      (*Proof for Tlt C E*)
      destruct H2.
      assumption.
generalize H4.
apply transfer_eqt_lt.
Qed.
End example1.

(*===============================*)
                    (*example 2*)
(*===============================*)
Section example2.
Theorem nt_Timed : forall (A B C D E F G I C1 D1 :Stream TD)(t:Time),
  (Sync A G)  /\ (LossySync G E) /\ (LossySync G F) /\ (Sync E I)     /\
  (Sync F I)   /\ (SyncDrain G I)   /\ (merge E F I)     /\ (Sync E C)     /\
  (Sync F D) /\ (Timert C C1 t)   /\ (Timert D D1 t)  /\ (merge C1 D1 B)
  -> (Teqt A B t).
Proof.
intros.
destruct H;destruct H0;destruct H1.
destruct H2;destruct H3;destruct H4.

(*Prepare for Lemma transfer_eqt*)
assert((Teq A I)/\(Teqt I B t)).
split.
(*Proof for Teq A I*)
rewrite H.
apply H4.
(*Proof for Teqt I B t*)
      (*Prepare for Lemma transfer_merge*)
      assert ((merge C D I) /\ (Teqt C C1 t) /\ (Teqt D D1 t) /\ (merge C1 D1 B)).
      repeat split.
      (*Proof for merge C D I*)
      destruct H5.
      destruct H6.
      rewrite <- H6.
      destruct H7.
      rewrite <- H7.
      assumption.
      (*Proof for Teqt C C1 t*)
      destruct H5.
      destruct H6.
      destruct H7.
      destruct H8.
      destruct H8.
      destruct H10.
      assumption.
      (*Proof for Teqt D D1 t*)
      destruct H5.
      destruct H6.
      destruct H7.
      destruct H8.
      destruct H9.
      destruct H9.
      destruct H11.
      assumption.
      (*Proof for merge C1 D1 B*)
      destruct H5.
      destruct H6.
      destruct H7.
      destruct H8.
      destruct H9.
      assumption.

      generalize H6.
      apply transfer_merge.

generalize H6.
apply transfer_eqt.
Qed.
End example2.

(*===============================*)
                    (*example 3*)
(*===============================*)
Section example3.
Theorem Timed_FIFO : forall (A B C D E:Stream TD)(t:Time),
  (FIFO1 A D) /\ (FIFO1 D E) /\ (Sync E B) /\ (SyncDrain C E) /\ (Teqt A C t)
  -> (Teqt A B t) /\ (Tlt B (tl(tl A))).
Proof.
intros.
split.

(*Proof for subgoal 1: Teqt A B t*)
destruct H.
destruct H0.
destruct H1.
destruct H2.
rewrite <- H1.
intro n.
rewrite <- H2.
apply Eq_Teqt.
assumption.

(*Proof for subgoal 2: Tlt B (tl (tl A))*)
destruct H.
destruct H0.
destruct H1.
rewrite <- H1.
(*Prepare for Lemma transfer_gt_gt*)
      destruct H2.
      assert(Tgt (tl D) E /\ Tgt (tl A) D).
      split.
      (*Proof for Tgt (tl D) E*)
      assert(Tlt E (tl D)).
      destruct H0.
      destruct H4.
      assumption.
      auto.
      (*Proof for Tgt (tl A) D*)
      assert(Tlt D (tl A)).
      destruct H.
      destruct H4.
      assumption.
      auto.

generalize H4.
apply transfer_gt_gt.
Qed.
End example3.
